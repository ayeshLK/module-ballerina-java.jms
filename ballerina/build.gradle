// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - JMS Package'

def packageName = "java.jms"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    testCoverageParam = "--code-coverage --coverage-format=xml --includes=*"
}

configurations {
    externalJars
}

dependencies {
    /* SLF4J dependencies */
    externalJars(group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}") {
        transitive = false
    }
    /* JMS dependencies */
    externalJars(group: 'javax.jms', name: 'javax.jms-api', version: "${javaxJmsVersion}") {
        transitive = false
    }

    /**
        Test related dependencies
     */
    externalJars(group: 'org.apache.activemq', name: 'activemq-client', version: "${activemqClientVersion}") {
        transitive = false
    }
    externalJars(group: 'org.apache.geronimo.specs', name: 'geronimo-j2ee-management_1.1_spec', version: "${geronimoJ2eeMng11SpecVersion}") {
        transitive = false
    }
    externalJars(group: 'org.fusesource.hawtbuf', name: 'hawtbuf', version: "${hawtbufVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentJavaxJmsVersion = project.javaxJmsVersion
        def stdlibDependentSlf4jVersion = project.slf4jVersion
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@slf4j.version@", stdlibDependentSlf4jVersion)
        newConfig = newConfig.replace("@javax.jms.version@", stdlibDependentJavaxJmsVersion)
        newConfig = newConfig.replace('@activemq.client.version@', project.activemqClientVersion)
        newConfig = newConfig.replace('@geronimoj2ee.spec.version@', project.geronimoJ2eeMng11SpecVersion)
        newConfig = newConfig.replace('@hawtbuf.version@', project.hawtbufVersion)
        ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

task startActiveMQServer() {
   doLast {
       if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
           def stdOut = new ByteArrayOutputStream()
           exec {
               commandLine 'sh', '-c', "docker ps --filter name=activemq-test"
               standardOutput = stdOut
           }
           if (!stdOut.toString().contains("activemq-test")) {
               println "Starting ActiveMQ server."
               exec {
                   commandLine 'sh', '-c', "docker-compose -f tests/resources/docker-compose.yaml up -d"
                   standardOutput = stdOut
               }
               println stdOut.toString()
               sleep(5 * 1000)
           } else {
               println "ActiveMQ server is already running."
           }
       }
   }
}

task stopActiveMQServer() {
   doLast {
       if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
           def stdOut = new ByteArrayOutputStream()
           exec {
               commandLine 'sh', '-c', "docker ps --filter name=activemq-test"
               standardOutput = stdOut
           }
           if (stdOut.toString().contains("activemq-test")) {
               println "Stopping ActiveMQ server."
               exec {
                   commandLine 'sh', '-c', "docker-compose -f tests/resources/docker-compose.yaml rm -svf"
                   standardOutput = stdOut
               }
               println stdOut.toString()
               sleep(5 * 1000)
           } else {
               println "ActiveMQ server is not started."
           }
       }
   }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

test.dependsOn startActiveMQServer
build.finalizedBy stopActiveMQServer

build.dependsOn ":java.jms-native:build"
build.dependsOn "generatePomFileForMavenPublication"
publishToMavenLocal.dependsOn build
publish.dependsOn build
