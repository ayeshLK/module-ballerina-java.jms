import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - JMS Package'

def packageName = "java.jms"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    testCoverageParam = "--code-coverage --coverage-format=xml --includes=io.ballerina.stdlib.*:stdlib.java.jms*"
}

configurations {
    externalJars
}

dependencies {
    /* SLF4J dependencies */
    externalJars(group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}") {
        transitive = false
    }
    /* JMS dependencies */
    externalJars(group: 'javax.jms', name: 'javax.jms-api', version: "${javaxJmsVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentJavaxJmsVersion = project.javaxJmsVersion
        def stdlibDependentSlf4jVersion = project.slf4jVersion
        def newConfig = ballerinaTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@slf4j.version@", stdlibDependentSlf4jVersion)
        newConfig = newConfig.replace("@javax.jms.version@", stdlibDependentJavaxJmsVersion)
        ballerinaTomlFile.text = newConfig
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml"
            }
        }
    }
}

//task startMqttServer() {
//    doLast {
//        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//            def stdOut = new ByteArrayOutputStream()
//            exec {
//                commandLine 'sh', '-c', "docker ps --filter name=mqtt-test"
//                standardOutput = stdOut
//            }
//            if (!stdOut.toString().contains("mqtt-test")) {
//                println "Starting Mqtt server."
//                exec {
//                    commandLine 'sh', '-c', "docker-compose -f tests/resources/docker-compose.yaml up -d"
//                    standardOutput = stdOut
//                }
//                println stdOut.toString()
//                sleep(5 * 1000)
//            } else {
//                println "Mqtt server is already running."
//            }
//        }
//    }
//}
//
//task stopMqttServer() {
//    doLast {
//        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//            def stdOut = new ByteArrayOutputStream()
//            exec {
//                commandLine 'sh', '-c', "docker ps --filter name=mqtt-test"
//                standardOutput = stdOut
//            }
//            if (stdOut.toString().contains("mqtt-test")) {
//                println "Stopping Mqtt server."
//                exec {
//                    commandLine 'sh', '-c', "docker-compose -f tests/resources/docker-compose.yaml rm -svf"
//                    standardOutput = stdOut
//                }
//                println stdOut.toString()
//                sleep(5 * 1000)
//            } else {
//                println "Mqtt server is not started."
//            }
//        }
//    }
//}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

updateTomlFiles.dependsOn copyStdlibs

//test.dependsOn startMqttServer
//build.finalizedBy stopMqttServer

build.dependsOn ":java.jms-native:build"
build.dependsOn "generatePomFileForMavenPublication"
publishToMavenLocal.dependsOn build
publish.dependsOn build
